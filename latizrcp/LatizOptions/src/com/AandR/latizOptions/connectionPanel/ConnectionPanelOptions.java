/**
 *  Copyright 2010 Latiz Technologies, LLC
 *
 *  This file is part of Latiz.
 *
 *  Latiz is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Latiz is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Latiz.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.AandR.latizOptions.connectionPanel;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.NbPreferences;

/**
 *
 * @author rstjohn
 */
public class ConnectionPanelOptions extends javax.swing.JPanel {

    private final ConnectionPanelOptionsController controller;
    private JColorChooser colorChooser;

    /** Creates new form ConnectionPanelOptions */
    public ConnectionPanelOptions(ConnectionPanelOptionsController controller) {
        this.controller = controller;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        JPanel jPanel1 = new JPanel();
        outgoing = new JLabel();
        outgoing.setBackground(Color.decode(ConnectionPanelOptionsController.DEFAULT_SOURCE_BACKGROUND));
        outgoing.setForeground(Color.decode(ConnectionPanelOptionsController.DEFAULT_FOREGROUND));
        JButton buttonBackground = new JButton();
        JButton jButton2 = new JButton();
        JButton jButton3 = new JButton();
        incoming = new JLabel();
        incoming.setBackground(Color.decode(ConnectionPanelOptionsController.DEFAULT_TARGET_BACKGROUND));
        incoming.setForeground(Color.decode(ConnectionPanelOptionsController.DEFAULT_FOREGROUND));
        JButton jButton4 = new JButton();
        JButton jButton5 = new JButton();
        JButton jButton6 = new JButton();

        jPanel1.setBorder(BorderFactory.createTitledBorder("Connection Panel Options"));

        outgoing.setBackground(new Color(0, 0, 255));
        outgoing.setFont(new Font("Tahoma", 1, 11)); // NOI18N
        outgoing.setForeground(new Color(255, 255, 255));
        outgoing.setHorizontalAlignment(SwingConstants.CENTER);
        outgoing.setText("Outgoing Connector");
        outgoing.setOpaque(true);

        buttonBackground.setText("Background");
        buttonBackground.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                actionSourceBackground(evt);
            }
        });

        jButton2.setText("Foreground");
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                actionSourceForeground(evt);
            }
        });

        jButton3.setText("Use Default");
        jButton3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                actionSourceDefault(evt);
            }
        });

        incoming.setBackground(new Color(0, 154, 205));
        incoming.setFont(new Font("Tahoma", 1, 11)); // NOI18N
        incoming.setForeground(new Color(255, 255, 255));
        incoming.setHorizontalAlignment(SwingConstants.CENTER);
        incoming.setText("Incoming Connector");
        incoming.setOpaque(true);

        jButton4.setText("Background");
        jButton4.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                actionTargetBackground(evt);
            }
        });

        jButton5.setText("Foreground");
        jButton5.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                actionTargetForeground(evt);
            }
        });

        jButton6.setText("Use Default");
        jButton6.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                actionTargetDefault(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(outgoing, GroupLayout.PREFERRED_SIZE, 127, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(buttonBackground)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(incoming, GroupLayout.PREFERRED_SIZE, 127, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jButton6)))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(outgoing)
                    .addComponent(buttonBackground)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(incoming)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(SwingConstants.VERTICAL, new Component[] {buttonBackground, incoming, outgoing});

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void actionSourceBackground(ActionEvent evt) {//GEN-FIRST:event_actionSourceBackground
        setColor(outgoing, true);
}//GEN-LAST:event_actionSourceBackground

    private void actionSourceForeground(ActionEvent evt) {//GEN-FIRST:event_actionSourceForeground
        setColor(outgoing, false);
    }//GEN-LAST:event_actionSourceForeground

    private void actionSourceDefault(ActionEvent evt) {//GEN-FIRST:event_actionSourceDefault
        outgoing.setBackground(Color.decode(ConnectionPanelOptionsController.DEFAULT_SOURCE_BACKGROUND));
        outgoing.setForeground(Color.decode(ConnectionPanelOptionsController.DEFAULT_FOREGROUND));
        controller.applyChanges();
    }//GEN-LAST:event_actionSourceDefault

    private void actionTargetBackground(ActionEvent evt) {//GEN-FIRST:event_actionTargetBackground
        setColor(incoming, true);
    }//GEN-LAST:event_actionTargetBackground

    private void actionTargetForeground(ActionEvent evt) {//GEN-FIRST:event_actionTargetForeground
        setColor(incoming, false);
    }//GEN-LAST:event_actionTargetForeground

    private void actionTargetDefault(ActionEvent evt) {//GEN-FIRST:event_actionTargetDefault
        incoming.setBackground(Color.decode(ConnectionPanelOptionsController.DEFAULT_SOURCE_BACKGROUND));
        incoming.setForeground(Color.decode(ConnectionPanelOptionsController.DEFAULT_FOREGROUND));
        controller.applyChanges();
    }//GEN-LAST:event_actionTargetDefault

    private void setColor(JLabel label, boolean isBackground) {
        if (colorChooser == null) {
            colorChooser = new JColorChooser();
        }
        Color initialColor = isBackground ? label.getBackground() : label.getForeground();
        colorChooser.setColor(initialColor);

        DialogDescriptor dd = new DialogDescriptor(colorChooser, "Color Chooser");
        Object ans = DialogDisplayer.getDefault().notify(dd);
        if (ans == DialogDescriptor.CANCEL_OPTION) {
            return;
        }

        if (isBackground) {
            label.setBackground(colorChooser.getColor());
        } else {
            label.setForeground(colorChooser.getColor());
        }
        controller.applyChanges();
    }

    void load() {
        // TODO read settings and initialize GUI
        // Example:
        // someCheckBox.setSelected(Preferences.userNodeForPackage(ConnectionPanelOptions.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(ConnectionPanelOptions.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
        String sourceBackground = NbPreferences.forModule(ConnectionPanelOptionsController.class).get("sourceBackground", ConnectionPanelOptionsController.DEFAULT_SOURCE_BACKGROUND);
        outgoing.setBackground(Color.decode(sourceBackground));

        String sourceForeground = NbPreferences.forModule(ConnectionPanelOptionsController.class).get("sourceForeground", ConnectionPanelOptionsController.DEFAULT_FOREGROUND);
        outgoing.setForeground(Color.decode(sourceForeground));

        String targetBackground = NbPreferences.forModule(ConnectionPanelOptionsController.class).get("targetBackground", ConnectionPanelOptionsController.DEFAULT_TARGET_BACKGROUND);
        incoming.setBackground(Color.decode(targetBackground));

        String targetForeground = NbPreferences.forModule(ConnectionPanelOptionsController.class).get("targetForeground", ConnectionPanelOptionsController.DEFAULT_FOREGROUND);
        incoming.setForeground(Color.decode(targetForeground));
    }

    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(ConnectionPanelOptions.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(ConnectionPanelOptions.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
        NbPreferences.forModule(ConnectionPanelOptionsController.class).put("sourceBackground", "#" + Integer.toHexString(outgoing.getBackground().getRGB()).substring(1));
        NbPreferences.forModule(ConnectionPanelOptionsController.class).put("sourceForeground", "#" + Integer.toHexString(outgoing.getForeground().getRGB()).substring(1));

        NbPreferences.forModule(ConnectionPanelOptionsController.class).put("targetBackground", "#" + Integer.toHexString(incoming.getBackground().getRGB()).substring(1));
        NbPreferences.forModule(ConnectionPanelOptionsController.class).put("targetForeground", "#" + Integer.toHexString(incoming.getForeground().getRGB()).substring(1));
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel incoming;
    private JLabel outgoing;
    // End of variables declaration//GEN-END:variables
}
