/**
 *  Copyright 2010 Latiz Technologies, LLC
 *
 *  This file is part of Latiz.
 *
 *  Latiz is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Latiz is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Latiz.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.AandR.palette.globals;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Point;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import javax.swing.CellEditor;
import org.netbeans.swing.etable.ETable;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.windows.IOProvider;

/**
 *
 * @author rstjohn
 */
public class GlobalsPanel extends javax.swing.JPanel {

    private LinkedHashMap<String, GlobalVariable> globalsMap;
    private String currentKey;

    /** Creates new form GlobalsPanel */
    public GlobalsPanel() {
        globalsMap = new LinkedHashMap<String, GlobalVariable>();
        initComponents();
    }

    public void setGlobalsMap(LinkedHashMap<String, GlobalVariable> globalsMap) {
        this.globalsMap = globalsMap;
        refreshTable();
    }

    public void refreshTable() {
        DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
        TableModelListener[] l = tableModel.getTableModelListeners();
        for (int i = 0; i < l.length; i++) {
            tableModel.removeTableModelListener(l[i]);
        }
        int rowCount = table.getRowCount();
        int colCount = table.getColumnCount();
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < colCount; j++) {
                tableModel.setValueAt(null, i, j);
            }
        }

        if (globalsMap == null) {
            table.repaint();
            return;
        }
        rowCount = 0;
        for (String key : globalsMap.keySet()) {
            tableModel.setValueAt(key, rowCount, 0);
            tableModel.setValueAt(globalsMap.get(key).getValue(), rowCount, 1);
            rowCount++;
        }

        for (int i = 0; i < l.length; i++) {
            tableModel.addTableModelListener(l[i]);
        }
        table.repaint();
    }

    public void updateGlobalsMap() {
        if (globalsMap == null) {
            return;
        }

        String label, value;
        Object labelValue, valueObject;
        Boolean isPublic;
        globalsMap.clear();

        for (int i = 0; i < table.getRowCount(); i++) {
            labelValue = table.getValueAt(i, 0);
            if (labelValue == null) {
                continue;
            }

            label = table.getValueAt(i, 0).toString();
            valueObject = table.getValueAt(i, 1);
            value = valueObject == null ? "" : valueObject.toString();
            isPublic = (Boolean) table.getValueAt(i, 2);
            globalsMap.put(label, new GlobalVariable(label, value, isPublic));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tablePopup = new javax.swing.JPopupMenu();
        itemAddGlobal = new javax.swing.JMenuItem();
        itemEditGlobal = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        itemDeleteGlobal = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        final Color rowColors[] = new Color[]{new Color(250, 250, 250), new Color(243, 243, 243)};
        table = new ETable(new DefaultTableModel(new String[]{"Name", "Value", "Public?"}, 70)) {
            @Override
            public Class getColumnClass(int c) {
                return c == 2 ? Boolean.class : String.class;
            }

            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int rowIndex, int vColIndex) {
                Component c = super.prepareRenderer(renderer, rowIndex, vColIndex);
                if (rowIndex % 2 == 1 && !isCellSelected(rowIndex, vColIndex)) {
                    c.setBackground(rowColors[0]);
                } else {
                    c.setBackground(rowColors[1]);
                }

                if (isCellSelected(rowIndex, vColIndex)) {
                    c.setBackground(getSelectionBackground());
                    c.setForeground(Color.BLUE.darker());
                    c.setFont(c.getFont().deriveFont(Font.BOLD));
                } else {
                    c.setForeground(UIManager.getColor("Table.forground"));
                    c.setFont(c.getFont().deriveFont(Font.PLAIN));
                }
                return c;
            }
        };
        table.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent evt) {
                tableChangedAction(evt);
            }
        });

        itemAddGlobal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/AandR/palette/globals/insert_table_row.png"))); // NOI18N
        itemAddGlobal.setText(org.openide.util.NbBundle.getMessage(GlobalsPanel.class, "GlobalsPanel.itemAddGlobal.text")); // NOI18N
        itemAddGlobal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGlobalAction(evt);
            }
        });
        tablePopup.add(itemAddGlobal);

        itemEditGlobal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/AandR/palette/globals/edit16.png"))); // NOI18N
        itemEditGlobal.setText(org.openide.util.NbBundle.getMessage(GlobalsPanel.class, "GlobalsPanel.itemEditGlobal.text")); // NOI18N
        itemEditGlobal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGlocalAction(evt);
            }
        });
        tablePopup.add(itemEditGlobal);
        tablePopup.add(jSeparator1);

        itemDeleteGlobal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/AandR/palette/globals/delete_table_row.png"))); // NOI18N
        itemDeleteGlobal.setText(org.openide.util.NbBundle.getMessage(GlobalsPanel.class, "GlobalsPanel.itemDeleteGlobal.text")); // NOI18N
        itemDeleteGlobal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGlobalAction(evt);
            }
        });
        tablePopup.add(itemDeleteGlobal);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/AandR/palette/globals/sort_incr16.png"))); // NOI18N
        jButton2.setText(org.openide.util.NbBundle.getMessage(GlobalsPanel.class, "GlobalsPanel.jButton2.text")); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortIncAction(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/AandR/palette/globals/sort_decr16.png"))); // NOI18N
        jButton1.setText(org.openide.util.NbBundle.getMessage(GlobalsPanel.class, "GlobalsPanel.jButton1.text")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortDescAction(evt);
            }
        });
        jToolBar1.add(jButton1);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Value", "Public?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addGlobalAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGlobalAction
        IOProvider.getDefault().getIO("Output", false).getOut().println("Add Global: Under construction");
    }//GEN-LAST:event_addGlobalAction

    private void editGlocalAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGlocalAction
        IOProvider.getDefault().getIO("Output", false).getOut().println("Edit Global: Under construction");
    }//GEN-LAST:event_editGlocalAction

    private void deleteGlobalAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGlobalAction
        int selectedRow = table.getSelectedRow();
        if (selectedRow < 0) {
            return;
        }

        Object o = table.getValueAt(selectedRow, 0);
        if (o == null) {
            return;
        }

        CellEditor e = table.getCellEditor();
        if (e != null) {
            e.cancelCellEditing();
        }

        String label = o.toString();
        globalsMap.remove(label);
        refreshTable();
    }//GEN-LAST:event_deleteGlobalAction

    private void sortIncAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortIncAction
        if (globalsMap == null) {
            NotifyDescriptor nd = new NotifyDescriptor.Message("Globals are out of sync with the selected palette.");
            DialogDisplayer.getDefault().notify(nd);
            return;
        }
        Comparator<String> comparator = new Comparator<String>() {

            public int compare(String o1, String o2) {
                return o1.compareToIgnoreCase(o2);
            }
        };
        TreeMap<String, GlobalVariable> treeMap = new TreeMap<String, GlobalVariable>(comparator);
        treeMap.putAll(globalsMap);
        globalsMap.clear();
        globalsMap.putAll(treeMap);
        treeMap.clear();
        refreshTable();
    }//GEN-LAST:event_sortIncAction

    private void sortDescAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortDescAction
        if (globalsMap == null) {
            NotifyDescriptor nd = new NotifyDescriptor.Message("Globals are out of sync with the selected palette.");
            DialogDisplayer.getDefault().notify(nd);
            return;
        }
        Comparator<String> comparator = new Comparator<String>() {

            public int compare(String o1, String o2) {
                return -o1.compareToIgnoreCase(o2);
            }
        };
        TreeMap<String, GlobalVariable> treeMap = new TreeMap<String, GlobalVariable>(comparator);
        treeMap.putAll(globalsMap);
        globalsMap.clear();
        globalsMap.putAll(treeMap);
        treeMap.clear();
        refreshTable();
    }//GEN-LAST:event_sortDescAction

    private void tableChangedAction(TableModelEvent evt) {
        if (evt.getType() != TableModelEvent.UPDATE) {
            return;
        }
        int row = table.getEditingRow();
        int col = table.getEditingColumn();
        if (row < 0 || col < 0) {
            return;
        }

        Object cellObject = table.getValueAt(row, 0);
        if (cellObject == null) {
            return;
        }

//            String label = cellObject.toString();
//            Object valueObject = table.getValueAt(row, 1);
//            String value = valueObject == null ? "" : valueObject.toString();
        updateGlobalsMap();
    }

    private void tableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseReleased
        int selectedRow = table.getSelectedRow();
        if (selectedRow < 0) {
            return;
        }

        Object selectedCell = table.getValueAt(selectedRow, 0);
        if (selectedCell == null) {
            currentKey = null;
        } else {
            currentKey = selectedCell.toString().trim();
        }
        boolean containsEntry = currentKey != null;
        tablePopup.getComponent(0).setEnabled(!containsEntry);
        tablePopup.getComponent(1).setEnabled(containsEntry);
        tablePopup.getComponent(2).setEnabled(containsEntry);
        tablePopup.getComponent(3).setEnabled(containsEntry);

        if (evt.getButton() == 3) {
            tablePopup.show(table, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tableMouseReleased

    private void tableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMousePressed
        if(evt.getButton()!=3) {
            return;
        }
        // get the coordinates of the mouse click
        Point p = evt.getPoint();

        // get the row index that contains that coordinate
        int rowNumber = table.rowAtPoint(p);

        // Get the ListSelectionModel of the JTable
        ListSelectionModel model = table.getSelectionModel();

        // set the selected interval of rows. Using the "rowNumber"
        // variable for the beginning and end selects only that one row.
        model.setSelectionInterval(rowNumber, rowNumber);
    }//GEN-LAST:event_tableMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem itemAddGlobal;
    private javax.swing.JMenuItem itemDeleteGlobal;
    private javax.swing.JMenuItem itemEditGlobal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private org.netbeans.swing.etable.ETable table;
    private javax.swing.JPopupMenu tablePopup;
    // End of variables declaration//GEN-END:variables
}
